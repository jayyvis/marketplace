diff --git a/sites/all/modules/contrib/spaces/spaces_og/plugins/space_og.inc b/sites/all/modules/contrib/spaces/spaces_og/plugins/space_og.inc
index 407025f..75f3047 100644
--- a/sites/all/modules/contrib/spaces/spaces_og/plugins/space_og.inc
+++ b/sites/all/modules/contrib/spaces/spaces_og/plugins/space_og.inc
@@ -4,7 +4,8 @@
  * Organic groups integration for Spaces.
  */
 class space_og extends space_type_purl {
-  var $group = NULL;
+  public $group = NULL;
+  public $group_type;
 
   /**
    * Constructor.
@@ -12,7 +13,9 @@ class space_og extends space_type_purl {
   function __construct($type, $id = NULL) {
     parent::__construct($type, $id);
     // Extend spaces object with og entity.
-    $this->og = og_get_group('node', $this->id);
+    if ($this->id) {
+      $this->og = entity_load_single($this->group_type, $this->id);
+    }
   }
 
   /**
@@ -64,11 +67,15 @@ class space_og extends space_type_purl {
     global $user;
     $account = isset($account) ? $account : $user;
 
-    return parent::access_space($account) && (
-      user_access('administer group') ||
-      $this->group->{OG_ACCESS_FIELD}[LANGUAGE_NONE][0]['value'] != 1 || // Group is public, allow access
-      og_is_member($this->og->gid, 'user', $account) || // User is group member, allow access
-      user_is_anonymous()); // User hasn't logged in -- provide entry point
+    $public = (!module_exists('og_access') || $this->group->{OG_ACCESS_FIELD}[LANGUAGE_NONE][0]['value'] != 1);
+
+    // Allow access when:
+    //  1. Group is public, allow access
+    //  2. User is a group member.
+    return parent::access_space($account) && (user_access('administer group') || $public ||
+    og_is_member($this->group_type, $this->id, 'user', $account) ||
+    // User hasn't logged in - provide entry point.
+    user_is_anonymous());
   }
 
   /**
@@ -82,8 +89,8 @@ class space_og extends space_type_purl {
       return TRUE;
     }
     else {
-     if (user_access('administer spaces', $account) || user_access('administer group', $account)) {
-      return TRUE;
+      if (user_access('administer spaces', $account) || user_access('administer group', $account)) {
+        return TRUE;
       }
     }
     return parent::access_admin($account);
@@ -101,14 +108,15 @@ class space_og extends space_type_purl {
     // Only allow access if: user can administer OG, group is public,
     // or user is a member.
     $membership = FALSE;
-    if ($membership = og_get_group_membership($this->og->gid, 'user', $account->uid)) {
+    if ($membership = og_get_membership($this->group_type, $this->id, 'user', $account->uid)) {
       $membership = $membership->state;
     }
-    $access = $access && (user_access('administer group') || $this->group->{OG_ACCESS_FIELD}[LANGUAGE_NONE][0]['value'] == OG_CONTENT_ACCESS_PUBLIC || $membership);
+    $wrapper = entity_metadata_wrapper('node', $this->group);
+    $access = $access && (user_access('administer group') || (!module_exists('og_access') || empty($wrapper->{OG_ACCESS_FIELD}) || !$wrapper->{OG_ACCESS_FIELD}->value()) || $membership);
 
     // Additional check for group membership if authoring content in this group.
     if ($op === 'create') {
-      return $access && og_is_member($this->og->gid, 'user', $account);
+      return $access && (user_access('administer group') || og_is_member($this->group_type, $this->id, 'user', $account));
     }
     return $access;
   }
@@ -120,8 +128,8 @@ class space_og extends space_type_purl {
     global $user;
     $account = isset($account) ? $account : $user;
     // Test whether both user and account belong to current space.
-    $test_user = og_is_member($this->og->gid, 'user');
-    $test_account = og_is_member($this->og->gid, FALSE, $account->uid);
+    $test_user = og_is_member($this->group_type, $this->id, 'user');
+    $test_account = og_is_member($this->group_type, $this->id, FALSE, $account->uid);
     if (($test_user && $test_account) || user_access('view users outside groups')) {
       return parent::access_user($op, $account);
     }
@@ -147,30 +155,33 @@ class space_og extends space_type_purl {
             $this->deactivate();
             return;
           }
-          // If editing or viewing an existing node, make sure we're in the correct space
+          // If editing or viewing an existing node, make sure we're in the
+          // correct space
           else if (isset($node->nid) && (!$this->active || ($this->active && $this->id != $node->nid)) && $space = spaces_load('og', $node->nid)) {
             $space->activate();
             return;
           }
         }
         // Group enabled node, route to correct group context.
-        // TODO verify that this sufficiently replaces the og_is_omitted_type() function.
+        // TODO verify that this sufficiently replaces the og_is_omitted_type()
+        // function.
         else if (og_is_group_content_type('node', $node->type)) {
           if (!empty($node->{OG_AUDIENCE_FIELD}[LANGUAGE_NONE])) {
-            foreach($node->{OG_AUDIENCE_FIELD}[LANGUAGE_NONE] as $item) {
-              $gids[] = $item['gid'];
+            foreach ($node->{OG_AUDIENCE_FIELD}[LANGUAGE_NONE] as $item) {
+              $gids[] = $item['target_id'];
             }
           }
 
-          // If the node belongs to the current active group space, or we're in an allowable other space type, pass thru
-          if ($this->active && in_array($this->og->gid, $gids)) {
+          // If the node belongs to the current active group space, or we're in
+          // an allowable other space type, pass thru
+          if ($this->active && in_array($this->id, $gids)) {
             return;
           }
 
           // Otherwise route
           $gid = reset($gids);
           if ($gid) {
-            spaces_load('og', og_load($gid)->etid)->activate();
+            spaces_load('og', $gid)->activate();
           }
           return;
         }
@@ -181,13 +192,25 @@ class space_og extends space_type_purl {
   // Spaces OG views filter
   function views_filter(&$query, $base_table = '', $relationship = '') {
     switch ($base_table) {
-      case 'node':
-        $table = $query->ensure_table('field_data_group_audience', $relationship);
-        $query->add_where(0, "$table.group_audience_gid", $this->og->gid);
-        break;
-      case 'users':
+      case 'og_membership':
+        if (!isset($query->space_og_proccessed)) {
+          // Add our view arguments to the first where group.
+          $where_group = key($query->where);
+          $query->space_og_proccessed = 1;
+        }
+        else {
+          // If using multiple spaces_current_space we need to OR them together.
+          $query->set_group_operator('OR');
+          $where_group = $query->set_where_group('AND');
+        }
+
+        // Ensure that the og_membership relationship was added.
         $table = $query->ensure_table('og_membership', $relationship);
-        $query->add_where(0, "$table.gid", $this->og->gid);
+        if ($table) {
+          // Add og_membership relationship parameters.
+          $query->add_where($where_group, $table . '.gid', $this->og->nid, '=');
+          $query->add_where($where_group, $table . '.group_type', $this->group_type, '=');
+        }
         break;
     }
   }
@@ -212,9 +235,10 @@ class space_og extends space_type_purl {
    *  User entity.
    */
   function og_is_group_admin($group, $account) {
-    $membership = og_get_group_membership($group->gid, 'user', $account->uid);
+    list($nid) = entity_extract_ids($this->group_type, $group);
+    $membership = og_get_membership('node', $nid, 'user', $account->uid);
     if (isset($membership->state) && $membership->state == OG_STATE_ACTIVE) {
-      return og_user_access($group->gid, 'manage group space', $account);
+      return og_user_access('node', $nid, 'manage group space', $account);
     }
     return FALSE;
   }
diff --git a/sites/all/modules/contrib/spaces/spaces_og/spaces_og.info b/sites/all/modules/contrib/spaces/spaces_og/spaces_og.info
index b3fa8ba..b6186e5 100644
--- a/sites/all/modules/contrib/spaces/spaces_og/spaces_og.info
+++ b/sites/all/modules/contrib/spaces/spaces_og/spaces_og.info
@@ -1,12 +1,14 @@
+description = "Provides integration between Spaces and OG."
+name = "Spaces OG"
+project = "spaces"
+package = "Spaces"
+version = "7.x-3.x-dev"
 core = 7.x
+
 dependencies[] = "og"
-dependencies[] = "og_access"
 dependencies[] = "og_views"
 dependencies[] = "spaces"
 dependencies[] = "purl"
-description = "Provides integration between Spaces and OG."
-name = "Spaces OG"
-package = "Spaces"
 
 files[] = spaces_og.module
 files[] = spaces_og.pages.inc
diff --git a/sites/all/modules/contrib/spaces/spaces_og/spaces_og.module b/sites/all/modules/contrib/spaces/spaces_og/spaces_og.module
index 5ac8f70..09c58f7 100644
--- a/sites/all/modules/contrib/spaces/spaces_og/spaces_og.module
+++ b/sites/all/modules/contrib/spaces/spaces_og/spaces_og.module
@@ -269,27 +269,6 @@ function spaces_og_node_update($node, $op = 'update') {
       if (!empty($node->spaces_preset_og)) {
         $space->controllers->variable->set('spaces_preset_og', $node->spaces_preset_og);
       }
-      // Configure OG directly from space object as node_save() may be
-      // called from outside of actual group space.
-      $selective = $space->controllers->variable->get('spaces_og_selective');
-      $node->og_selective = $selective === NULL ? OG_OPEN : $selective;
-      $register = $space->controllers->variable->get('spaces_og_register');
-      $node->og_register = $register === NULL ? TRUE : $register;
-      $directory = $space->controllers->variable->get('spaces_og_directory');
-      $node->og_directory = $directory === NULL ? TRUE : $directory;
-      $private = $space->controllers->variable->get('spaces_og_private');
-      $field_langauge = field_language('node', $node, 'group_access');
-      if ($op == 'update' && $private != $node->group_access[$field_langauge][0]['value']) {
-        // Privacy has changed, update og_public flags, and queue a rebuid.
-        db_query("UPDATE {og_access_post} og_p
-          INNER JOIN {og_ancestry} og_a ON og_p.nid = og_a.nid
-          INNER JOIN {node} n ON og_p.nid = n.nid
-          SET og_public = %d WHERE og_a.group_nid = %d", ! $private, $node->nid);
-        node_access_needs_rebuild(TRUE);
-      }
-      $node->og_private = $private === NULL ? FALSE : $private;
-      // TODO determine the D7 equivalent of og_update_group().
-      // og_update_group($node);
     }
 
     // Save PURL modifier.
@@ -607,8 +586,8 @@ function spaces_og_spaces_get_space_from_object($type, $object) {
       return spaces_load('og', $object->nid);
     }
     else if (og_is_group_content_type('node', $object->type)) {
-      if (isset($object->{OG_AUDIENCE_FIELD}[LANGUAGE_NONE][0]['gid'])) {
-        return spaces_load('og', og_load($object->{OG_AUDIENCE_FIELD}[LANGUAGE_NONE][0]['gid'])->etid);
+      if (isset($object->{OG_AUDIENCE_FIELD}[LANGUAGE_NONE][0]['target_id'])) {
+        return spaces_load('og', $object->{OG_AUDIENCE_FIELD}[LANGUAGE_NONE][0]['target_id']);
       }
     }
   }
@@ -639,17 +618,77 @@ function spaces_og_og_context_handler() {
 
   $space = spaces_get_space();
   if (isset($space->type) && $space->type == 'og') {
-    $gids[] = $space->og->gid;
+    $gids[$space->group_type][] = $space->og->nid;
   }
 
   return $gids;
 }
 /**
- * Implements hook_query_TAG_alter().
+ * Implements hook_views_data_alter().
+ */
+function spaces_og_views_data_alter(&$data){
+  // @TODO: one of these needs to be removed
+  if (isset($data['og_membership']['gid']['field']['handler'])) {
+    $data['og_membership']['gid']['field']['handler'] = 'spaces_og_handler_field_og_group_nids';
+  }
+  if (isset($data['og_ancestry']['group_nid']['field']['handler'])) {
+    $data['og_ancestry']['group_nid']['field']['handler'] = 'spaces_og_handler_field_og_group_nids';
+  }
+}
+
+/**
+ * Implements hook_views_pre_view().
  */
-function spaces_og_query_user_autocomplete_spaces_og_alter(QueryAlterableInterface $query) {
-  if (!user_access('view users outside groups')) {
-    $query->join('og_membership', 'ogm', 'u.uid = ogm.etid AND ogm.entity_type = :type', array(':type' => 'user'));
-    $query->condition('gid', reset(spaces_og_og_context_handler()));
+function spaces_og_views_pre_view(&$view, &$display_id, &$args){
+
+  // The Spaces Current Space filter is bound to the space data stub
+  // if we are in an OG space we want to use the OG membership relation
+  // to filter the posts.
+  $space = spaces_get_space();
+
+  // Is this space of type OG and we are acting on users or nodes.
+  if (is_object($space) && $space->type == 'og') {
+    // After we have determined that we are in an OG space lets make
+    // sure this display makes use of the spaces filter.
+    $filter = $view->get_item($display_id, 'filter', 'current');
+
+    if ($filter) {
+      $table = FALSE;
+      if (!isset($filter['relationship']) || $filter['relationship'] == 'none') {
+        $table = $view->base_table;
+      }
+      elseif (($rel = $view->get_item($display_id, 'relationship', $filter['relationship']))) {
+        // Get Relationship data.
+        $rel_data = views_get_handler($rel['table'], $rel['field'], 'relationship');
+
+        // Use the base table for the relationship the current space filter is
+        // attached to.
+        if (isset($rel_data->definition['base'])) {
+          $table = $rel_data->definition['base'];
+        }
+      }
+
+      $tables = array(
+        'file_managed',
+        'node',
+        'user,'
+      );
+      if (in_array($table, $tables)) {
+        // Check to see if the relationship has already been added via the UI.
+        if (!$view->get_item($display_id, 'relationship', 'og_membership_rel')) {
+          // If so lets add the Relationship.
+          $view->add_item($display_id, 'relationship', $table, 'og_membership_rel');
+        }
+        // Set the 'current' space filter up to use the new og relationshipt
+        $view->set_item_option($display_id, 'filter', 'current', 'relationship', 'og_membership_rel');
+      }
+      $i = 1;
+      //For views that use multiple spaces filters tie the multiple spaces filters to thier respective og_membership tables
+      while ($view->get_item($display_id, 'filter', 'current_'.$i) && $view->get_item($display_id, 'relationship', 'og_membership_rel_'.$i)) {
+        //Set the 'current_n' space filter up to use a og relationship
+        $view->set_item_option($display_id, 'filter', 'current_'.$i, 'relationship', 'og_membership_rel_'.$i);
+        $i++;
+      }
+    }
   }
 }
diff --git a/sites/all/modules/contrib/spaces/spaces_og/views/spaces_og.views.inc b/sites/all/modules/contrib/spaces/spaces_og/views/spaces_og.views.inc
index 3074c72..0bd4a51 100644
--- a/sites/all/modules/contrib/spaces/spaces_og/views/spaces_og.views.inc
+++ b/sites/all/modules/contrib/spaces/spaces_og/views/spaces_og.views.inc
@@ -30,12 +30,3 @@ function spaces_og_views_handlers() {
     ),
   );
 }
-
-/**
- * Implements hook_views_data_alter().
- */
-function spaces_og_views_data_alter(&$data) {
-  if (isset($data['og_ancestry']['group_nid']['field']['handler'])) {
-    $data['og_ancestry']['group_nid']['field']['handler'] = 'spaces_og_handler_field_og_group_nids';
-  }
-}
